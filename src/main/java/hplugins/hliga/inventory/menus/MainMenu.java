package hplugins.hliga.inventory.menus;

import com.cryptomorin.xseries.XMaterial;
import hplugins.hliga.Main;
import hplugins.hliga.inventory.gui.BaseGui;
import hplugins.hliga.inventory.utils.ItemBuilder;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.inventory.ItemStack;

import java.util.HashMap;
import java.util.Map;

/**
 * Menu principal do sistema hLiga
 * Compat√≠vel com Minecraft 1.8 - 1.21+
 * 
 * @author hPlugins and Hokase
 * @version 2.0.0
 */
public class MainMenu extends BaseGui {
    
    /**
     * Construtor do menu principal
     * 
     * @param plugin Inst√¢ncia do plugin
     * @param player Jogador
     */
    public MainMenu(Main plugin, Player player) {
        super(plugin, player);
    }
    
    @Override
    public void open(int page) {
        buildInventory();
        if (inventory != null) {
            player.openInventory(inventory);
            plugin.getInventoryManager().registerGui(player, this);
        } else {
            player.sendMessage(ChatColor.RED + "Erro interno: N√£o foi poss√≠vel abrir o menu!");
        }
    }
    
    @Override
    protected void buildInventory() {
        ConfigurationSection config = null;
        
        try {
            config = plugin.getConfigManager().getMenusConfig().getConfigurationSection("menu_principal");
        } catch (Exception e) {
            plugin.getLogger().warning("Erro ao carregar configura√ß√£o do menu: " + e.getMessage());
        }
        
        
        String title = "&6hLiga &8- &7Menu";
        int size = 27;
        
        if (config != null) {
            title = config.getString("titulo", title);
            size = config.getInt("tamanho", size);
        }
        
        title = ensureCompatibleTitle(title);
        this.inventory = Bukkit.createInventory(null, size, title);
        this.clickActions.clear();
        
        
        if (config != null) {
            createBorder(config);
        }
        
        
        if (config != null) {
            ConfigurationSection itemsConfig = config.getConfigurationSection("itens");
            if (itemsConfig != null) {
                for (String key : itemsConfig.getKeys(false)) {
                    ConfigurationSection itemConfig = itemsConfig.getConfigurationSection(key);
                    if (itemConfig != null) {
                        addMenuItem(itemConfig, key);
                    }
                }
            }
        } else {
            
            createDefaultItems();
        }
        
        
        if (config != null) {
            fillEmptySlots(config);
        }
    }
    
    /**
     * Adiciona um item do menu
     * 
     * @param itemConfig Configura√ß√£o do item
     * @param actionKey Chave da a√ß√£o
     */
    private void addMenuItem(ConfigurationSection itemConfig, String actionKey) {
        int slot = itemConfig.getInt("slot", 0);
        ItemStack item = createConfigItem(itemConfig, getPlaceholders());
        
        if (item != null) {
            inventory.setItem(slot, item);
            
            
            String action = itemConfig.getString("acao", actionKey);
            addClickAction(slot, event -> handleMenuAction(action, event));
        }
    }
    
    /**
     * Manipula as a√ß√µes dos itens do menu
     * 
     * @param action A√ß√£o a ser executada
     * @param event Evento de clique
     */
    private void handleMenuAction(String action, InventoryClickEvent event) {
        switch (action.toLowerCase()) {
            case "clans":
                new ClanListMenu(plugin, player).open(1);
                break;
                
            case "top_clans":
                new TopClansMenu(plugin, player).open(1);
                break;
                
            case "temporada":
                new SeasonMenu(plugin, player).open(1);
                break;
                
            case "historico":
                new SeasonHistoryMenu(plugin, player).open(1);
                break;
                
            case "fechar":
                player.closeInventory();
                break;
                
            default:
                player.sendMessage(ChatColor.YELLOW + "Funcionalidade em desenvolvimento!");
                break;
        }
    }
    
    /**
     * Cria itens padr√£o quando a configura√ß√£o n√£o est√° dispon√≠vel
     */
    private void createDefaultItems() {
        
        ItemStack clansItem = new ItemBuilder(XMaterial.IRON_CHESTPLATE)
                .name("&e‚öî &6Lista de Cl√£s &e‚öî")
                .lore("", "&7Ver todos os cl√£s registrados", "&7e suas respectivas pontua√ß√µes", "", "&8‚û• &aClique para abrir")
                .build();
        inventory.setItem(10, clansItem);
        addClickAction(10, event -> new ClanListMenu(plugin, player).open(1));
        
        
        ItemStack topItem = new ItemBuilder(XMaterial.GOLDEN_HELMET)
                .name("&eüèÜ &6Top Cl√£s &eüèÜ")
                .lore("", "&7Ver o ranking dos cl√£s", "&7com maior pontua√ß√£o", "", "&8‚û• &aClique para abrir")
                .build();
        inventory.setItem(12, topItem);
        addClickAction(12, event -> new TopClansMenu(plugin, player).open(1));
        
        
        ItemStack seasonItem = new ItemBuilder(XMaterial.CLOCK)
                .name("&e‚è∞ &6Temporada Atual &e‚è∞")
                .lore("", "&7Ver informa√ß√µes detalhadas", "&7sobre a temporada em andamento", "", "&8‚û• &aClique para abrir")
                .build();
        inventory.setItem(14, seasonItem);
        addClickAction(14, event -> new SeasonMenu(plugin, player).open(1));
        
        
        ItemStack historyItem = new ItemBuilder(XMaterial.BOOK)
                .name("&eüìö &6Hist√≥rico &eüìö")
                .lore("", "&7Ver o hist√≥rico completo", "&7de temporadas anteriores", "", "&8‚û• &aClique para abrir")
                .build();
        inventory.setItem(16, historyItem);
        addClickAction(16, event -> new SeasonHistoryMenu(plugin, player).open(1));
        
        
        ItemStack closeItem = new ItemBuilder(XMaterial.BARRIER)
                .name("&c‚úò Fechar Menu")
                .lore("", "&7Clique para fechar este menu")
                .build();
        inventory.setItem(22, closeItem);
        addClickAction(22, event -> player.closeInventory());
    }
    
    /**
     * Obt√©m placeholders para substitui√ß√£o nos itens
     * 
     * @return Map com placeholders
     */
    private Map<String, String> getPlaceholders() {
        Map<String, String> placeholders = new HashMap<>();
        
        
        placeholders.put("{player}", player.getName());
        
        
        if (plugin.getSeasonManager() != null && plugin.getSeasonManager().getCurrentSeason() != null) {
            String seasonName = plugin.getSeasonManager().getCurrentSeason().getName();
            placeholders.put("{temporada_atual}", seasonName);
        } else {
            placeholders.put("{temporada_atual}", "Nenhuma");
        }
        
        
        if (plugin.getPointsManager() != null) {
            int totalClans = plugin.getPointsManager().getTopClans(Integer.MAX_VALUE).size();
            placeholders.put("{total_clans}", String.valueOf(totalClans));
        } else {
            placeholders.put("{total_clans}", "0");
        }
        
        return placeholders;
    }
}